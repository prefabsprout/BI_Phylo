snapshotPCA3d(file="first_plot.png")
library(Biobase)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_data <- as.matrix(expr_norm)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
library(limma)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_data <- as.matrix(expr_norm)
pheno_data <- prot_expr_chars
pheno_metadata <- data.frame(
labelDescription = c("Genotype", "Treatment", "Behaviour", "class"),
row.names=c("Genotype", "Treatment", "Behaviour", "class"))
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
feature_data <- data.frame(Spot = rownames(expr_data))
rownames(feature_data) <- rownames(expr_data)
feature_metadata <- data.frame(
labelDescription = c("Spot number"),
row.names = c("Spot"))
f_data <- new("AnnotatedDataFrame",
data = feature_data,
varMetadata = feature_metadata)
exp_set <-
ExpressionSet(assayData = expr_data,
phenoData = pheno_metadata,
featureData = feature_metadata)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(vegan)
library(pca3d)
prot_expr <-
read_xls('/home/stephen/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
length(prot_expr$MouseID)
prot_expr_chars <- prot_expr %>% select_if(is.character)
apply(prot_expr_chars[,-1], MARGIN = 2, function(x) table(x))
nrow(prot_expr) - length(which(rowSums(is.na(prot_expr)) > 0))
prot_expr_omited <- na.omit(prot_expr)
prot_expr_chars <- prot_expr_omited[,-1] %>% select_if(is.character)
prot_expr_num <- prot_expr_omited %>% select_if(is.numeric)
#apply(prot_expr_num, MARGIN = 2, function(x) qplot(x, geom = 'histogram'))
pairwise.wilcox.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
model_full <- lm(ERBB4_N ~ ., prot_expr_num)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
optimal_model <- step(model_full, scope = list(lower = model_null, upper = model_full))
summary(optimal_model)
mod_diag <- fortify(optimal_model)
gg_resid <- ggplot(data = mod_diag, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(prot_expr_omited)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(optimal_model)
prot_expr_pca <- rda(prot_expr_num, scale = TRUE)
summary(prot_expr_pca)
biplot(prot_expr_pca, scaling = "species", display = "species")
pca_summary <- prcomp(prot_expr_num, scale= T)
eigs <- pca_summary$sdev^2
eigs/sum(eigs)*100
pca3d(pca_summary)
snapshotPCA3d(file="first_plot.png")
library(Biobase)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_data <- as.matrix(expr_norm)
expr_data <- as.matrix(expr_norm)
library(limma)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
expr_data <- as.matrix(expr_norm)
pheno_data <- prot_expr_chars
pheno_metadata <- data.frame(
labelDescription = c("Genotype", "Treatment", "Behaviour", "class"),
row.names=c("Genotype", "Treatment", "Behaviour", "class"))
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data,
varMetadata = pheno_metadata)
feature_data <- data.frame(Spot = rownames(expr_data))
rownames(feature_data) <- rownames(expr_data)
feature_metadata <- data.frame(
labelDescription = c("Spot number"),
row.names = c("Spot"))
f_data <- new("AnnotatedDataFrame",
data = feature_data,
varMetadata = feature_metadata)
f_data <- new("AnnotatedDataFrame",
data = feature_data)
exp_set <-
ExpressionSet(assayData = expr_data,
phenoData = pheno_metadata,
featureData = feature_metadata)
exp_set <-
ExpressionSet(assayData = expr_data,
phenoData = pheno_data,
featureData = f_adata)
exp_set <-
ExpressionSet(assayData = expr_data,
phenoData = pheno_data,
featureData = f_data)
pheno_data <- new("AnnotatedDataFrame", data=pheno_data)
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(vegan)
library(pca3d)
prot_expr <-
read_xls('/home/stephen/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
length(prot_expr$MouseID)
prot_expr_chars <- prot_expr %>% select_if(is.character)
apply(prot_expr_chars[,-1], MARGIN = 2, function(x) table(x))
nrow(prot_expr) - length(which(rowSums(is.na(prot_expr)) > 0))
prot_expr_omited <- na.omit(prot_expr)
prot_expr_chars <- prot_expr_omited[,-1] %>% select_if(is.character)
prot_expr_num <- prot_expr_omited %>% select_if(is.numeric)
#apply(prot_expr_num, MARGIN = 2, function(x) qplot(x, geom = 'histogram'))
pairwise.wilcox.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
model_full <- lm(ERBB4_N ~ ., prot_expr_num)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
optimal_model <- step(model_full, scope = list(lower = model_null, upper = model_full))
library(readxl)
library(dplyr)
library(ggplot2)
library(car)
library(vegan)
library(pca3d)
prot_expr <-
read_xls('/home/stephen/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
length(prot_expr$MouseID)
prot_expr_chars <- prot_expr %>% select_if(is.character)
apply(prot_expr_chars[,-1], MARGIN = 2, function(x) table(x))
nrow(prot_expr) - length(which(rowSums(is.na(prot_expr)) > 0))
prot_expr_omited <- na.omit(prot_expr)
prot_expr_chars <- prot_expr_omited[,-1] %>% select_if(is.character)
prot_expr_num <- prot_expr_omited %>% select_if(is.numeric)
#apply(prot_expr_num, MARGIN = 2, function(x) qplot(x, geom = 'histogram'))
pairwise.wilcox.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
model_full <- lm(ERBB4_N ~ ., prot_expr_num)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
optimal_model <- step(model_full, scope = list(lower = model_null, upper = model_full))
summary(optimal_model)
mod_diag <- fortify(optimal_model)
gg_resid <- ggplot(data = mod_diag, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(prot_expr_omited)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(optimal_model)
prot_expr_pca <- rda(prot_expr_num, scale = TRUE)
summary(prot_expr_pca)
biplot(prot_expr_pca, scaling = "species", display = "species")
pca_summary <- prcomp(prot_expr_num, scale= T)
eigs <- pca_summary$sdev^2
eigs/sum(eigs)*100
pca3d(pca_summary)
snapshotPCA3d(file="first_plot.png")
expr_data <- as.matrix(expr_norm)
library(limma)
expr_norm <- normalizeQuantiles(log2(prot_expr_num + 1))
library(Biobase)
expr_data <- as.matrix(expr_norm)
pheno_data <- prot_expr_chars
pheno_metadata <- data.frame(
labelDescription = c("Genotype", "Treatment", "Behaviour", "class"),
row.names=c("Genotype", "Treatment", "Behaviour", "class"))
pheno_data <- new("AnnotatedDataFrame", data=pheno_data)
feature_data <- data.frame(Spot = rownames(expr_data))
rownames(feature_data) <- rownames(expr_data)
feature_metadata <- data.frame(
labelDescription = c("Spot number"),
row.names = c("Spot"))
f_data <- new("AnnotatedDataFrame",
data = feature_data)
exp_set <-
ExpressionSet(assayData = expr_data,
phenoData = pheno_data,
featureData = f_data)
AnnotatedDataFrame(pheno_metadata)
pheno_data <- AnnotatedDataFrame(pheno_metadata)
pdata <- AnnotatedDataFrame(pheno_data)
View(prot_expr_num)
View(prot_expr)
View(prot_expr_omited)
prot_expr <-
read_xls('/home/stephen/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
View(prot_expr)
fit <- aov(BDNF_N ~ class, prot_expr_omited)
summary(fit)
qplot(prot_expr_omited$BDNF_N, geom = 'histogram')
pairwise.wilcox.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
pairwise.wilcox.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
pairwise.t.test(prot_expr_omited$BDNF_N, prot_expr_omited$class, p.adjust.method = 'bonferroni')
View(prot_expr)
View(pca_summary)
if(!require(dplyr)) install.packages("dplyr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(readxl)) install.packages("readxl",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(ggplot2)) install.packages("ggplot2",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(vegan)) install.packages("vegan",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(pca3d)) install.packages("pca3d",repos = "http://cran.us.r-project.org", dependencies = T)
fit <- aov(BDNF_N ~ class, prot_expr_omited)
summary(fit)
model_full <- lm(ERBB4_N ~ ., prot_expr_num)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
optimal_model <- step(model_full, scope = list(lower = model_null, upper = model_full))
pca3d(pca_summary)
snapshotPCA3d(file="first_plot.png")
model_full <- lm(ERBB4_N ~ ., prot_expr_num)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
optimal_model <- step(model_full, scope = list(lower = model_null, upper = model_full))
pca2d(pca_summary)
pca3d(pca_summary)
prot_expr <-
read_xls('https://archive.ics.uci.edu/ml/machine-learning-databases/00342/Data_Cortex_Nuclear.xls')
prot_expr <-
read_xls('https://archive.ics.uci.edu/ml/machine-learning-databases/00342/Data_Cortex_Nuclear.xls')
prot_expr <-
read_xls('/~/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
prot_expr <-
read_xls('~/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
!['https://sun9-21.userapi.com/2yvLVOK5Dgem0Gj86GsX6wZj4HjKy32R8-_eJg/5umWOkLmO2Q.jpg']()
![https://sun9-21.userapi.com/2yvLVOK5Dgem0Gj86GsX6wZj4HjKy32R8-_eJg/5umWOkLmO2Q.jpg]()
View(expr_norm)
View(prot_expr)
if(!require(dplyr)) install.packages("dplyr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(readxl)) install.packages("readxl",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(ggplot2)) install.packages("ggplot2",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(vegan)) install.packages("vegan",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(pca3d)) install.packages("pca3d",repos = "http://cran.us.r-project.org", dependencies = T)
length(prot_expr$MouseID)/15
prot_expr <-
read_xls('~/Git_Repositories/BI_2019_Stats/Stat_project_3/Data_Cortex_Nuclear.xls')
if(!require(dplyr)) install.packages("dplyr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(readxl)) install.packages("readxl",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(ggplot2)) install.packages("ggplot2",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(vegan)) install.packages("vegan",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(pca3d)) install.packages("pca3d",repos = "http://cran.us.r-project.org", dependencies = T)
ggplot(prot_expr_omited, aes(x = class, y = BDNF_N, fill = class)) +
geom_boxplot() +
geom_jitter(shape = 15,
color = "steelblue",
position = position_jitter(0.21))
ggplot(prot_expr_omited, aes(x = class, y = BDNF_N, fill = class)) +
geom_boxplot()
if(!require(dplyr)) install.packages("dplyr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(readxl)) install.packages("readxl",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(ggplot2)) install.packages("ggplot2",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(vegan)) install.packages("vegan",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(pca3d)) install.packages("pca3d",repos = "http://cran.us.r-project.org", dependencies = T)
fit <- aov(class ~ BDNF_N, prot_expr_omited)
summary(fit)
fit <- aov(class ~ BDNF_N, prot_expr_omited)
View(prot_expr_omited)
fit <- aov(prot_expr_omited$BDNF_N ~ prot_expr_omited$class)
summary(fit)
model_null <- lm(ERBB4_N ~ 1, prot_expr_num)
summary(model_null)
fit <- aov(BDNF_N ~ class, prot_expr_omited)
summary(fit)
library(ape)
library(ape)
library(ape)
library(ape)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
library(ape)
library(ape)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt)
tree1 <- read.delim('https://www.jasondavies.com/tree-of-life/life.txt')
View(tree1)
View(tree1)
View(tree1)
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
plot.phylo(tree1)
plot.phylo(tree1, srt = 90)
plot.phylo(tree1, srt = 45)
plot.phylo(tree1, rotate.tree = T)
plot.phylo(tree1, rotate.tree = 90)
plot.phylo(tree1, rotate.tree = 180)
plot.phylo(tree1, edge.width = 2)
plot.phylo(tree1, edge.width = 6)
plot.phylo(tree1, edge.width = 1)
plot.phylo(tree1, fsize=0.6)
plot.phylo(tree1, )
plotTree(anolis.tree,ftype="i",fsize=0.6,lwd=1)
install.packages('BayesianFirstAid')
install.packages('banf')
install.packages('bang')
install.packages('BayesFactor')
library(BayesFactor)
df <- iris
df_sepal <- df$Sepal.Width[which(df$Species == 'Setosa')]
df_sepal <- df$Sepal.Width[which(df$Species == 'setosa')]
df_setosa <- df$Sepal.Width[which(df$Species == 'setosa')]
df <- iris
df_setosa <- df$Sepal.Width[which(df$Species == 'setosa')]
df_virginia <- df$Sepal.Width[which(df$Species == 'virginica')]
ttestBF(df_setosa, df_virginia)
bf <- ttestBF(df_setosa, df_virginia)
t.test(df_setosa, df_virginia)
t.test(df_setosa, df_virginia,paired = T)
bf <- ttestBF(df_setosa, df_virginia,paired = T)
bf
bf <- ttestBF(df_setosa, df_virginia,paired = T, posterior = T)
ttestBF(df$Sepal.Width ~df$Species)
ttestBF(df$Sepal.Width ~ df$Species)
ttestBF(df$Species ~ df$Sepal.Width)
ttestBF(df_setosa, df_virginia,paired = T)
ttestBF(df_setosa, df_virginia,paired = F)
ttestBF(df_setosa, df_virginia,paired = T)
309478.4/0.707
0.707/309478.4
ttestBD(df$Sepal.Width[,which(df$Species == 'setosa')], df$Sepal.Width[,which(df$Species == 'virginica')],
paired = T)
ttestBF(df$Sepal.Width[,which(df$Species == 'setosa')], df$Sepal.Width[,which(df$Species == 'virginica')],
paired = T)
ttestBF(df$Sepal.Width[which(df$Species == 'setosa')], df$Sepal.Width[which(df$Species == 'virginica')],
paired = T)
ttestBF(df$Sepal.Width[which(df$Species == 'setosa')], df$Sepal.Width[which(df$Species == 'versicolor')],
paired = T)
927306524/0.707
12/30
6/15
4/15
5/15
6/15
0.4*0.6+0.3*0.5+0.3*0.7
0.3*0.5/0.6
0.5*4/15
0.13/(0.6*0.4+2/15+0.7*1.3)
2/15
0.3*0.5
0.13/(0.6*0.4+0.133+0.7*1.3)
0.4*0.6+0.133+0.3*0.7
0.3*0.5/0.6
0.3*0.5/0.583
4/15
6/15
6/15*0.6
0.5*4/15
0.133/(0.6*0.4+2/15+0.7*1/3)
0.4*0.04+0.06*0.35+0.25*0.03
0.4*0.04/0.0445
0.133/(0.6*0.4+2/15+0.7*1/3)
2/15
0.5*4/15
0.133/(0.6*0.4+2/15+0.7*1/3)
4/15
0.3*0.5
0.3*0.5
(0.6*0.4+2/15+0.7*1/3)
0.4*0.6+0.3*0.5+0.3*0.7
0.3*0.5/0.6
(4/15*0.5)/0.6
4/15
4/15*0.5
0.3*0.5
0.26*0.5
0.133/(0.6*0.4+2/15+0.7*1/3)
8/30
0.3*0.5
0.4*0.6+0.3*0.5+0.3*0.7
0.15/0.6
3/4
4/15
0.26*0.5/0.6
0.3*0.5/0.6
4/15
8/30
0.13/(0.6*0.4+2/15+0.7*1.3)
0.133/(0.6*0.4+2/15+0.7*1/3)
0.133/(0.6*0.4+2/15+0.7*1.3)
0.4*0.6+0.3*0.5+0.3*0.7
0.133/(0.6*0.4+2/15+0.7*5/15)
0.3*0.5/0.6
0.27*0.5/0.6
0.26*0.5/0.6
ttestBF(df$Sepal.Width[which(df$Species == 'setosa')], df$Sepal.Width[which(df$Species == 'virginica
')],
paired = T)
df <- read.csv('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt')
df <- read.csv('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt')
View(df)
df <- na.omit(read.csv('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt'))
glm(survived ~ df$age + df$sex + df$pclass)
glm(survived ~ df$age + df$sex + df$pclass, data = df)
glm(survived ~ age + sex + df$pclass, data = df)
glm(survived ~ age + sex + df$pclass, data = df,
family = binomial(link = 'logit'))
glm(survived ~ age + sex + df$pclass, data = df,
family = binomial)
logmod <- glm(survived ~ age + sex + df$pclass, data = df,
family = binomial)
AIC(logmod)
summary(logmod)
tree <- read.tree('/home/stephen/Bioinformatics Institure/Biopractice №5/Human/human_philo.ph')
library(ape)
tree <- read.tree('/home/stephen/Bioinformatics Institure/Biopractice №5/Human/human_philo.ph')
plot.phylo(tree)
library(ape)
tree <- read.tree('/home/stephen/Bioinformatics Institure/Biopractice №5/Human/human_philo.ph')
plot.phylo(tree)
tree
tree <- read.file('/home/stephen/Bioinformatics Institure/NGS/file.format6.out')
tree <- read.csv('/home/stephen/Bioinformatics Institure/NGS/file.format6.out')
View(tree)
tree <- read.csv('/home/stephen/Bioinformatics Institure/NGS/file.format6.out',
sep = '')
View(tree)
summary(tree)
library(ape)
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
plot.phylo(tree1)
phydataplot(tree1)
plot.phylo(tree1, type = 'unrooted')
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial', label.offset = 0)
plot.phylo(tree1, type = 'radial', label.offset = 1)
plot.phylo(tree1, type = 'radial', label.offset = 2)
plot.phylo(tree1, type = 'radial', label.offset = 3)
plot.phylo(tree1, label.offset = 3)
plot.phylo(tree1, label.offset = 0)
root_tree1 <- plot.phylo(tree1, label.offset = 0, direction = '')
root_tree1 <- plot.phylo(tree1)
png(filename="your/file/location/name.png")
root_tree1 <- plot.phylo(tree1)
root_tree1 <- plot.phylo(tree1)
png(filename="your/file/location/tree1.png")
root_tree1 <- plot.phylo(tree1)
plot(tree1)
plot.phylo(tree1)
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial')
plot.phylo(tree1, type = 'radial')
library(ape)
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
root_tree1 <- plot.phylo(tree1)
plot.phylo(tree1, type = 'unrooted')
plot.phylo(tree1, type = 'radial'
png("phylo1.png")
setwd("/home/stephen/Bioinformatics Institure/Molecular Phylogeny/HW1")
getwd()
png(file = "unrooted_tree1.png")
library(ape)
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
plot.phylo(tree1)
dev.off()
plot.phylo(tree1)
dev.off()
plot.phylo(tree1)
png(file = "unrooted_tree1.png")
plot.phylo(tree1)
plot.phylo(tree1)
dev.off()
tree1 <- read.tree('https://www.jasondavies.com/tree-of-life/life.txt')
plot.phylo(tree1)
tree2_string = '(((A, B), (C, D)), E)'
tree2 <- read.tree(tree2_string)
cat(tree2_string, file = "tree2.tre", sep = "\n")
tree2 <- read.tree('tree2.tre')
plot.phylo(tree2)
tree2_string = '(((A, B), (C, D)), E)'
cat(tree2_string, file = "tree2.tre")
tree2 <- read.tree('tree2.tre')
plot.phylo(tree2)
tree2 <- read.tree(text='(((A, B), (C, D)), E)')
plot.phylo(tree2)
tree2 <- read.tree(text='((A, B), ((C, D), (E, F)));')
plot(myTree)
plot(tree2)
library(ape)
library(ape)
tree2 <- read.tree(text='((A, B), ((C, D), (E, F)));')
plot(tree2)
plot(tree2)
plot(tree2)
plot(tree2)
